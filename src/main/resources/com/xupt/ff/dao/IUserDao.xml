<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xupt.ff.dao.IUserDao">

    <!--定义user的resultMap-->
    <resultMap id="userAccountMap" type="user">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="sex" column="sex"></result>
        <result property="birthday" column="birthday"></result>
        <result property="address" column="address"></result>
        <!--配置user对象中accountList集合的映射-->
        <collection property="accountList" ofType="account">
            <id property="id" column="aid"></id>
            <result property="money" column="money"></result>
            <result property="uid" column="uid"></result>
        </collection>
        <collection property="roleList" ofType="role">
            <id property="roleId" column="rid"></id>
            <result property="roleName" column="role_name"></result>
            <result property="roleDesc" column="role_desc"></result>
        </collection>
    </resultMap>
    <!--配置查询所有-->
    <select id="findAll" resultMap="userAccountMap">
        select u.*,r.id as rid, r.role_name,r.role_desc from user u
             left outer join user_role ur on u.id = ur.uid
             left outer join role r on ur.rid = r.id
    </select>
    
    <!--配置保存用户信息-->
    <insert id="saveUser" parameterType="User">
        insert into user(username,address,sex,birthday) values(#{username},#{address},#{sex},#{birthday});
        <!--在插入用户后获取插入用户的id-->
        <selectKey keyColumn="id" keyProperty="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
    </insert>

    <!--更新用户信息-->
    <update id="updateUser" parameterType="User">
        update user set username=#{username},address = #{address},sex = #{sex},birthday = #{birthday} where id = #{id};
    </update>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from  user where id = #{uid};
    </delete>

    <!--根据id查询用户-->
    <select id="findOne" parameterType="Int" resultType="User">
        select * from user where id = #{uid};
    </select>

    <!--根据字符串模糊查询-->
    <select id="findByName" parameterType="String" resultType="User">
        <!--采用的PrepatedStatement的参数占位符 select * from user where username like ? -->
        select * from user where username like #{username};
        <!--java内部采用的是statement的对象字符串拼接sql select * from user where username like '王' -->
        <!--select * from user where username like '%${value}%'; -->
    </select>

    <!--聚合函数查询用户数-->
    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>

    <!--通过传递javaBean对象对多个条件进行符复合查询-->
    <select id="findByVo" parameterType="queryVo" resultType="User"  >
        select * from user where username like #{user.username};
    </select>
    
    <!--动态sql ，使用where，if，foreach查询Id集合中用户列表-->
    <select id="findByCondition" parameterType="queryVo" resultType="User">
        select * from user
        <where>
            <if test="idList != null and idList.size() > 0">
                <foreach collection="idList" open = "and id in (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
</mapper>